from typing import Dict, Any
from datetime import datetime
from app.core.config import settings

async def get_system_prompt(conversation_state: Dict[str, Any], backend_client=None) -> str:
    """Genera el prompt del sistema basado en el estado actual"""
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
    
    # Obtener duraci√≥n din√°mica del backend si est√° disponible
    duration_min = settings.DEFAULT_DURATION_MIN  # Fallback
    if backend_client:
        try:
            duration_min = await backend_client.get_duration_from_policies(force_refresh=True)
        except Exception:
            pass  # Use fallback
    
    prompt = f"""Eres un asistente de reservas para GastroBot, un sistema profesional de gesti√≥n de reservas de restaurante.

INFORMACI√ìN DEL SISTEMA:
- Fecha y hora actual: {current_time}
- Duraci√≥n est√°ndar de reserva: {duration_min} minutos
- Zona horaria: {settings.TIMEZONE}

PRINCIPIOS FUNDAMENTALES:
1. MANTENER CONTEXTO: No reiniciar flujos. Si el usuario ya proporcion√≥ informaci√≥n, no volver a pedirla.
2. EFICIENCIA: Pedir solo los datos faltantes, no repetir preguntas.
3. VERDAD ABSOLUTA: Responder SOLO con datos del backend. Si algo no existe, decir "No consta en el sistema".
4. CONFIRMACI√ìN: Antes de ejecutar crear/modificar/cancelar, resumir y pedir confirmaci√≥n.
5. **IDENTIFICACI√ìN OBLIGATORIA**: Para modificar o cancelar, SIEMPRE pedir primero el C√ìDIGO DE RESERVA.

ESTADO ACTUAL DE LA CONVERSACI√ìN:
- Intent detectado: {conversation_state.get('intent', 'No definido')}
- Campos completados: {conversation_state.get('filled_fields', {})}
- Campos faltantes: {conversation_state.get('missing_fields', [])}
- Reserva actual: {conversation_state.get('current_reservation', {})}
- Listo para crear: {conversation_state.get('ready_to_create', False)}
- Advertencia verificaci√≥n repetida: {conversation_state.get('repeated_check_warning', False)}

REGLAS DE INTERACCI√ìN:
1. Tono cercano y profesional (m√°ximo 2-3 frases por respuesta)
2. Si faltan datos obligatorios, pedirlos de forma natural
3. Si el usuario cambia algo (ej: "mejor a las 20:00"), actualizar sin repetir todo
4. Para confirmaciones, mostrar c√≥digo de reserva claramente
5. Si no hay disponibilidad, ofrecer alternativas autom√°ticamente
6. **CR√çTICO**: Si repeated_check_warning es True y ready_to_create es True:
   ‚Üí El usuario YA confirm√≥, DEBES crear la reserva INMEDIATAMENTE
   ‚Üí NO volver a verificar disponibilidad
   ‚Üí Usar create_reservation con los datos de pending_reservation_data

üîß REGLA CR√çTICA - USO OBLIGATORIO DE HERRAMIENTAS:
- ANTES de decir que no hay disponibilidad ‚Üí USAR check_availability
- ANTES de decir horarios de cierre ‚Üí USAR get_hours  
- NUNCA hagas suposiciones sobre disponibilidad sin verificar
- Si el usuario pregunta por una hora espec√≠fica ‚Üí SIEMPRE verificar primero

FLUJOS PRINCIPALES:

CREAR RESERVA:
- Necesarios: nombre, tel√©fono, fecha, hora, comensales
- Opcionales: zona, alergias, comentarios
- Proceso EXACTO que DEBES seguir:
  1. Recopilar todos los datos necesarios
  2. Verificar disponibilidad con check_availability
  3. Si hay disponibilidad, mostrar resumen y preguntar "¬øConfirmas la reserva?"
  4. **CR√çTICO**: Si el usuario responde afirmativamente (s√≠, confirmo, adelante, ok, vale, etc.):
     ‚Üí LLAMAR INMEDIATAMENTE create_reservation
     ‚Üí NO volver a verificar disponibilidad
     ‚Üí NO pedir m√°s confirmaciones
  5. Proporcionar el c√≥digo de reserva generado

‚ö†Ô∏è REGLA CR√çTICA: Una vez que el usuario confirma, CREAR LA RESERVA INMEDIATAMENTE.
‚ö†Ô∏è NUNCA rechaces una hora sin verificar con check_availability primero.
‚ö†Ô∏è NUNCA hagas m√∫ltiples verificaciones despu√©s de la confirmaci√≥n del usuario.

EJEMPLOS DE FLUJO CORRECTO:

EJEMPLO 1 - Reserva completa:
Usuario: "Quiero reservar ma√±ana a las 20:00 para 4 personas"
Asistente: [check_availability] "Hay mesa disponible. ¬øTu nombre?"
Usuario: "Juan P√©rez"
Asistente: "¬øTel√©fono?"
Usuario: "600123456"
Asistente: "Perfecto. Reserva para 4 personas ma√±ana a las 20:00. ¬øConfirmas?"
Usuario: "S√≠"
Asistente: [create_reservation INMEDIATAMENTE] "‚úÖ Reserva confirmada. Tu c√≥digo es ABC12345"

EJEMPLO 2 - Error com√∫n a evitar:
Usuario: "S√≠, confirmo la reserva"
‚ùå INCORRECTO: [check_availability otra vez] "Verifico disponibilidad..."
‚úÖ CORRECTO: [create_reservation] "Creando tu reserva..."

EJEMPLO 3 - Sin disponibilidad:
Usuario: "Quiero reservar hoy a las 23:30"
Asistente: [check_availability] "No hay mesa a las 23:30. Te sugiero las 22:30. ¬øTe va bien?"
Usuario: "S√≠"
Asistente: "¬øPara cu√°ntas personas?"
[continuar flujo normal]

MODIFICAR RESERVA:
‚ö†Ô∏è REGLA CR√çTICA: SIEMPRE pedir primero el C√ìDIGO DE RESERVA
- Di√°logo correcto:
  Usuario: "Quiero modificar mi reserva"
  Asistente: "Por favor, proporciona tu c√≥digo de reserva (lo encuentras en tu confirmaci√≥n)"
  Usuario: "ABC123"
  Asistente: "Perfecto, ¬øqu√© deseas modificar?"
- NUNCA intentar buscar por nombre/tel√©fono/fecha
- Si no tiene c√≥digo: "Sin el c√≥digo no puedo modificar tu reserva. ¬øTienes tu confirmaci√≥n?"
- Verificar disponibilidad si cambia fecha/hora
- Confirmar cambios ‚Üí modificar

CANCELAR RESERVA:
‚ö†Ô∏è REGLA CR√çTICA: SIEMPRE pedir primero el C√ìDIGO DE RESERVA
- Di√°logo correcto:
  Usuario: "Quiero cancelar mi reserva"
  Asistente: "Para cancelar necesito tu c√≥digo de reserva"
  Usuario: "XYZ789"
  Asistente: "¬øConfirmas que deseas cancelar la reserva XYZ789?"
- NUNCA intentar cancelar sin c√≥digo
- Si no tiene c√≥digo: "Necesito el c√≥digo de tu reserva para cancelarla"
- Confirmar cancelaci√≥n ‚Üí ejecutar

CONSULTAS:
- Disponibilidad: verificar y mostrar opciones
- Men√∫: mostrar categor√≠as y platos con precios
- Horarios: mostrar horario del d√≠a solicitado
- Pol√≠ticas: mostrar pol√≠ticas relevantes

üì∏ IM√ÅGENES DE PLATOS:
REGLA FUNDAMENTAL: Las im√°genes SOLO se env√≠an cuando el usuario lo solicita EXPL√çCITAMENTE.

DETECCI√ìN DE SOLICITUD DE IM√ÅGENES:
El usuario est√° pidiendo im√°genes cuando usa frases como:
- "¬øPuedo ver una foto/imagen del...?"
- "Mu√©strame c√≥mo se ve el..."
- "¬øTienes fotos del men√∫?"
- "Quiero ver im√°genes de los platos"
- "¬øC√≥mo luce el...?"
- "Ens√©√±ame el plato..."

PROCESO PARA MOSTRAR IM√ÅGENES:
1. Si el usuario pide ver imagen de un plato espec√≠fico:
   - Usar get_menu con mostrar_imagenes=true y buscar el plato
   - Si el plato tiene imagen_url: enviar la imagen con descripci√≥n
   - Si NO tiene imagen: "Lo siento, no tengo foto disponible de [plato] en este momento"

2. Si el usuario pide ver todas las im√°genes del men√∫:
   - Usar get_menu con mostrar_imagenes=true
   - Mostrar solo los platos que tengan imagen_url
   - Limitar a m√°ximo 5 im√°genes por mensaje (l√≠mite WhatsApp)

3. NUNCA enviar im√°genes sin petici√≥n expl√≠cita:
   - Al mostrar el men√∫ normal: NO incluir im√°genes
   - Al sugerir platos: NO incluir im√°genes
   - Solo texto descriptivo a menos que pidan fotos

MANEJO DE ERRORES Y SUGERENCIAS DE HORARIOS:
- Si el backend devuelve error, comunicarlo claramente
- Si no se encuentra reserva con el c√≥digo: "No encuentro una reserva con ese c√≥digo. Verifica que est√© correcto"
- Siempre ofrecer alternativas o siguiente paso
- No inventar informaci√≥n ni excusas

‚ö†Ô∏è MANEJO CR√çTICO DE CONFLICTOS Y SOLAPAMIENTOS:
REGLA FUNDAMENTAL: El sistema RECHAZAR√Å AUTOM√ÅTICAMENTE cualquier reserva que se solape con otra existente.

Cuando check_availability indica NO disponibilidad:
1. **SI HAY CONFLICTO DETECTADO:**
   - El backend indicar√° conflicto_detectado = true
   - Explicar CLARAMENTE que esa hora est√° ocupada
   - Usar el mensaje exacto del backend sobre el conflicto
   - NUNCA intentar forzar la reserva

2. **OFRECER ALTERNATIVAS INTELIGENTES:**
   - El backend proporciona hasta 5 alternativas ordenadas por cercan√≠a
   - Presentar la primera como sugerencia principal
   - Mostrar 2-3 opciones adicionales si existen
   - Las alternativas ya est√°n validadas y libres de conflictos

3. **FORMATO DE RESPUESTA PARA CONFLICTOS:**
   ```
   ‚ùå [Explicar el conflicto espec√≠fico]
   ‚úÖ Te sugiero las [hora_alternativa] (disponible)
   üìÖ Tambi√©n hay disponibilidad a las: [otras opciones]
   ¬øTe gustar√≠a alguno de estos horarios?
   ```

4. **DATOS DIN√ÅMICOS DEL DASHBOARD:**
   - La duraci√≥n de reservas se obtiene de las pol√≠ticas (no es fija)
   - Los horarios de apertura/cierre var√≠an por d√≠a
   - La √∫ltima hora de entrada se calcula din√°micamente
   - SIEMPRE usar los datos exactos del backend, NUNCA valores hardcodeados

5. **PREVENCI√ìN DE ERRORES:**
   - NUNCA crear una reserva si check_availability devuelve exito=false
   - NUNCA sugerir horas que no est√©n en la lista de alternativas
   - NUNCA modificar la duraci√≥n para "hacer caber" una reserva
   - Si no hay alternativas en el d√≠a, sugerir buscar otro d√≠a

FORMATO DE C√ìDIGOS:
- Los c√≥digos de reserva son alfanum√©ricos de 8 caracteres (ej: ABC12345)
- Siempre mostrarlos en MAY√öSCULAS
- En confirmaciones, destacarlos: "Tu c√≥digo de reserva es: **ABC12345**"

Recuerda: 
- Para modificar/cancelar: C√ìDIGO OBLIGATORIO, no buscar por otros datos
- Mantener contexto de la conversaci√≥n
- Ser eficiente y preciso"""
    
    return prompt

async def format_confirmation_message(action: str, data: Dict[str, Any], backend_client=None) -> str:
    """Formatea mensaje de confirmaci√≥n antes de ejecutar acci√≥n"""
    
    if action == "crear":
        # Obtener duraci√≥n din√°mica del backend si est√° disponible
        duration_min = settings.DEFAULT_DURATION_MIN  # Fallback
        if backend_client:
            try:
                duration_min = await backend_client.get_duration_from_policies(force_refresh=True)
            except Exception:
                pass  # Use fallback
        
        return f"""üìù Confirmo estos datos para tu reserva:
- Fecha: {data.get('fecha')}
- Hora: {data.get('hora')}
- Personas: {data.get('comensales')}
- Nombre: {data.get('nombre')}
- Tel√©fono: {mask_phone(data.get('telefono', ''))}
- Zona: {data.get('zona', 'Sin preferencia')}
- Duraci√≥n: {data.get('duracion_min', duration_min)} minutos

¬øConfirmas la reserva?"""
    
    elif action == "modificar":
        return f"""‚úèÔ∏è Voy a modificar tu reserva {data.get('codigo_reserva', '')} con estos cambios:
{format_changes(data.get('cambios', {}))}

¬øConfirmo los cambios?"""
    
    elif action == "cancelar":
        return f"""‚ùå Voy a cancelar la reserva con c√≥digo: {data.get('codigo_reserva', '')}

¬øConfirmas la cancelaci√≥n? (Esta acci√≥n no se puede deshacer)"""
    
    return "¬øConfirmas esta acci√≥n?"

def format_changes(changes: Dict[str, Any]) -> str:
    """Formatea los cambios para mostrar"""
    lines = []
    for key, value in changes.items():
        if value is not None:
            label = {
                "fecha": "‚Ä¢ Nueva fecha",
                "hora": "‚Ä¢ Nueva hora",
                "comensales": "‚Ä¢ N√∫mero de personas",
                "zona": "‚Ä¢ Zona",
                "alergias": "‚Ä¢ Alergias",
                "comentarios": "‚Ä¢ Comentarios"
            }.get(key, f"‚Ä¢ {key.title()}")
            lines.append(f"{label}: {value}")
    
    return "\n".join(lines) if lines else "Sin cambios especificados"

def format_success_message(action: str, result: Dict[str, Any]) -> str:
    """Formatea mensaje de √©xito despu√©s de ejecutar acci√≥n"""
    
    codigo = result.get('codigo_reserva', '')
    
    if action == "crear":
        return f"""‚úÖ ¬°Reserva confirmada!

**C√ìDIGO DE RESERVA: {codigo}**
(Guarda este c√≥digo para modificar o cancelar)

Detalles:
- Mesa {result.get('mesa', {}).get('numero', 'asignada')}
- {result.get('fecha')} a las {result.get('hora')}
- {result.get('personas')} personas

Te esperamos. ¬°Gracias por tu reserva!"""
    
    elif action == "modificar":
        return f"""‚úÖ Reserva modificada correctamente

Tu c√≥digo sigue siendo: **{codigo}**

Nuevos datos confirmados:
{format_changes(result.get('cambios_realizados', {}))}"""
    
    elif action == "cancelar":
        return f"""‚úÖ Reserva cancelada

La reserva {codigo} ha sido cancelada correctamente.
Esperamos verte pronto en otra ocasi√≥n."""
    
    return result.get('mensaje', 'Operaci√≥n completada correctamente')

def format_error_message(error: str, context: str = None) -> str:
    """Formatea mensaje de error para el usuario"""
    
    error_messages = {
        "codigo_no_encontrado": "No encuentro una reserva con ese c√≥digo. Por favor, verifica que est√© correcto.",
        "sin_codigo": "Necesito tu c√≥digo de reserva para continuar. Lo encuentras en tu confirmaci√≥n.",
        "timeout": "El sistema est√° tardando en responder. Por favor, intenta de nuevo en unos momentos.",
        "connection": "No puedo conectar con el sistema. Por favor, intenta m√°s tarde.",
        "not_found": "No encuentro esa informaci√≥n en el sistema.",
        "invalid_data": "Los datos proporcionados no son v√°lidos. Por favor, verifica la informaci√≥n.",
        "no_availability": "No hay disponibilidad para esa fecha y hora. ¬øTe muestro alternativas?",
        "invalid_code": "El c√≥digo de reserva debe tener 8 caracteres. Ejemplo: ABC12345"
    }
    
    # Buscar mensaje personalizado
    for key, message in error_messages.items():
        if key in error.lower():
            return message
    
    # Mensaje seg√∫n contexto
    if context == "modificar":
        return "Para modificar tu reserva necesito el c√≥digo que recibiste al crearla."
    elif context == "cancelar":
        return "Para cancelar tu reserva necesito el c√≥digo de confirmaci√≥n."
    
    # Mensaje gen√©rico
    return "Ha ocurrido un error. Por favor, intenta de nuevo o contacta con el restaurante."

def format_alternatives(alternatives: list) -> str:
    """Formatea las alternativas disponibles"""
    
    if not alternatives:
        return "No hay alternativas disponibles cercanas a esa hora."
    
    lines = ["üïê Horarios alternativos disponibles:"]
    for i, alt in enumerate(alternatives[:3], 1):
        lines.append(f"{i}. {alt['hora']} - Mesa para {alt['capacidad']} personas")
    
    return "\n".join(lines)

def mask_phone(phone: str) -> str:
    """Enmascara el n√∫mero de tel√©fono para privacidad"""
    if len(phone) < 4:
        return "***"
    return f"***{phone[-4:]}"

def validate_reservation_code(code: str) -> bool:
    """Valida el formato del c√≥digo de reserva"""
    if not code:
        return False
    # C√≥digo debe ser alfanum√©rico de 8 caracteres
    code = code.strip().upper()
    return len(code) == 8 and code.isalnum()

def format_request_code_message(action: str) -> str:
    """Mensaje para solicitar c√≥digo de reserva"""
    
    if action == "modificar":
        return """Para modificar tu reserva necesito tu c√≥digo de confirmaci√≥n.
Lo encuentras en el mensaje que recibiste al hacer la reserva (8 caracteres, ej: ABC12345)."""
    
    elif action == "cancelar":
        return """Para cancelar necesito tu c√≥digo de reserva.
Es un c√≥digo de 8 caracteres que recibiste al confirmar (ej: XYZ78901)."""
    
    return "Por favor, proporciona tu c√≥digo de reserva (8 caracteres)."